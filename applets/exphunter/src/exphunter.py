#!/usr/bin/env python
# exphunter 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: app will run on a single machine from beginning to end.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import subprocess

@dxpy.entry_point('main')
def main(readfile, buildfile, varcatalog, outprefix, mode, threads):

    # Initialise file inputs (DX file links) as dxpy.DXDataObject bindings
    readfile = dxpy.DXFile(readfile)
    buildfile = dxpy.DXFile(buildfile)
    varcatalog = dxpy.DXFile(varcatalog)

    # Download initialised files to instance
    dxpy.download_dxfile(readfile.get_id(), "readfile")
    dxpy.download_dxfile(buildfile.get_id(), "buildfile")
    dxpy.download_dxfile(varcatalog.get_id(), "varcatalog")

    # Run Expansion Hunter as a bash subprocess
    cmd = "ExpansionHunter --reads readfile --reference buildfile --variant-catalog varcatalog --output-prefix outprefix --threads threads --analysis-mode mode"
    subprocess.check_call(cmd, shell=True)

    # Upload created files from instance to project
    outvcf = dxpy.upload_local_file(f"{outprefix}.vcf")
    outjson = dxpy.upload_local_file(f"{outprefix}.json")

    # Return output files
    output = {}
    output["outvcf"] = dxpy.dxlink(outvcf)
    output["outjson"] = dxpy.dxlink(outjson)
    return output

dxpy.run()
