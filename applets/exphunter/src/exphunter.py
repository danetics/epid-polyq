#!/usr/bin/env python
# exphunter 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: app will run on a single machine from beginning to end.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import subprocess

@dxpy.entry_point('main')
def main(readfile, readindex, buildfile, varcatalog, outprefix, mode, sex):

    # Initialise file inputs (DX file links) as dxpy.DXDataObject bindings
    readfile = dxpy.DXFile(readfile)
    readindex = dxpy.DXFile(readindex)
    buildfile = dxpy.DXFile(buildfile)
    varcatalog = dxpy.DXFile(varcatalog)
    print('initialised DX links as dxpy.DXDataObject bindings')

    # Download initialised files to instance
    dxpy.download_dxfile(readfile.get_id(), "readfile.cram")
    dxpy.download_dxfile(readindex.get_id(), "readfile.cram.crai")
    dxpy.download_dxfile(buildfile.get_id(), "buildfile.fa")
    dxpy.download_dxfile(varcatalog.get_id(), "varcatalog.json")

    # Run Expansion Hunter as a bash subprocess using string formatting to pass variables
    # Note: the shell=True command is sub-optimal.  This should be changed to execute using subprocess.run()
    # Threads are hard-coded to 16 as this is optimal for the streaming analysis mode
    cmd = f"""ExpansionHunter --reads readfile.cram --reference buildfile.fa --variant-catalog varcatalog.json --output-prefix {outprefix} --analysis-mode {mode} --sex {sex} --threads 16"""
    subprocess.check_call(cmd, shell=True)

    # Upload created files from instance to project
    outvcf = dxpy.upload_local_file(f"{outprefix}.vcf")
    outjson = dxpy.upload_local_file(f"{outprefix}.json")

    # Return output files
    output = {}
    output["outvcf"] = dxpy.dxlink(outvcf)
    output["outjson"] = dxpy.dxlink(outjson)
    return output

dxpy.run()
